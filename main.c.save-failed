#include <SDL2/SDL.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define dim 11
#define len_p 50
int plateau[dim][dim];
int posible[4];
int clik[2];
SDL_Window *window = NULL;
SDL_Texture *pion = NULL;
SDL_Texture *pion_select = NULL;
SDL_Texture *pion_pos = NULL;
SDL_Texture *texture = NULL;
SDL_Renderer * renderer = NULL;
SDL_Rect rect[dim][dim];

void initialise(){
    int i, j;

    for(i=0; i<dim; i++){
        for(j=1; j<dim-1; j++){
            if((i==j && i==dim/2))
                plateau[i][j]=0;
            else if((i<4 && j<4) || (i>6 && j>6) || (i<4&&j>6)||(i>6 && j<4))
                plateau[i][j]=2;
            else if(i!=dim-1)
                plateau[i][j]=1;
        }

        }
    for(i=0; i<dim; i++){
        plateau[i][0]=2;
        plateau[0][i]=2;
        plateau[i][dim-1]=2;
        plateau[dim-1][i]=2;
    }
    for(i=0; i<dim; i++){
        for(j=0; j<dim; j++){
            rect[i][j].x = 100+len_p*j;
            rect[i][j].y = 100+len_p*i;
            rect[i][j].h = len_p;
            rect[i][j].w = len_p;
        }
    }
}

void affiche_dispo(){
     int i, j;
     for(i=0; i<dim; i++){
        for(j=0; j<dim; j++){
            printf("%3d", plateau[i][j]);
   }
        printf("\n");
        }
       printf("\n");
}

void refresh(){
    int i, j;
    SDL_Rect rec = {0, 0, 50, 50};
    SDL_RenderClear(renderer);
    SDL_Color white = {0, 0, 255, 255};
    SDL_Color black = {255, 255, 255, 255};

    for(i=0; i<dim; i++){
        for(j=0; j<dim; j++){
            if(plateau[i][j]==1){
                SDL_RenderCopy(renderer, pion, &rec, &rect[i][j]);
            }
            if(plateau[i][j]==4){
                SDL_RenderCopy(renderer, pion_pos, &rec, &rect[i][j]);
            }
            if(plateau[i][j]==5){
                SDL_RenderCopy(renderer, pion_select, &rec, &rect[i][j]);
            }
        }
    }
    SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255);
    for(i=4; i<8; i++){
        SDL_RenderDrawLine(renderer, 100+len_p*i, 100+len_p, 100+len_p*i, 100+len_p*(dim-1));
        SDL_RenderDrawLine(renderer, 100+len_p, 100+len_p*i, 100+len_p*(dim-1), 100+len_p*i);
    }
    for(i=1; i<4; i++){
        SDL_RenderDrawLine(renderer, 100+len_p*i, 100+len_p*4, 100+len_p*i, 100+len_p*(dim-4));
        SDL_RenderDrawLine(renderer, 100+len_p*4, 100+len_p*i, 100+len_p*(dim-4), 100+len_p*i);
    }
    for(i=8; i<11; i++){
        SDL_RenderDrawLine(renderer, 100+len_p*i, 100+len_p*4, 100+len_p*i, 100+len_p*(dim-4));
        SDL_RenderDrawLine(renderer, 100+len_p*4, 100+len_p*i, 100+len_p*(dim-4), 100+len_p*i);
    }
    SDL_SetRenderDrawColor(renderer, 0, 0, 0, 0);
    SDL_RenderPresent(renderer);
}

int verif_event(SDL_Event event){
    int n=0;
    int x=event.button.x, y = event.button.y;
    int i, j;
    SDL_Point clic={x, y};

    for(i=0; i<dim; i++){
        for(j=0; j<dim; j++){
            if(SDL_PointInRect(&clic, &rect[i][j])){
                 clik[0]  = i;
                clik[1] = j;
                if(plateau[i][j]!=1){
                    return n;
                }
                else{
                    //test a gauche
                    if(plateau[i][j-1]==1 && plateau[i][j-2]==0)
                    {
                      n++;
                      posible[0]=1;
                    }else posible[0]=0;
                    //test a droite
                    if(plateau[i][j+1]==1 && plateau[i][j+2]==0){
                        n++;
                        posible[1]=1;
                    }else posible[1]=0;
                    //test en haut
                    if(plateau[i-1][j]==1 && plateau[i-2][j]==0){
                        n++;
                        posible[2]=1;
                    }else posible[2]=0;
                    //test en bas
                    if(plateau[i+1][j]==1 && plateau[i+2][j]==0){
                        n++;
                        posible[3]=1;
                    }else posible[3]=0;
                    return n;
                }
               break;
            }
        }
    }

}

void bouf(){
    SDL_Event eventx;
    plateau[clik[0]][clik[1]] = 5;
    if(posible[0]==1)
        plateau[clik[0]][clik[1]-2] = 4;
    if(posible[1]==1)
        plateau[clik[0]][clik[1]+2] = 4;
    if(posible[2]==1)
        plateau[clik[0]-2][clik[1]] = 4;
    if(posible[3]==1)
        plateau[clik[0]+2][clik[1]] = 4;
    refresh();
    SDL_Delay(50);

    SDL_WaitEvent(&eventx);
    while(eventx.type != SDL_MOUSEBUTTONDOWN)
        SDL_WaitEvent(&eventx);
    plateau[clik[0]][clik[1]] = 1;
    if(posible[0]==1)
        plateau[clik[0]][clik[1]-2] = 0;
    if(posible[1]==1)
        plateau[clik[0]][clik[1]+2] = 0;
    if(posible[2]==1)
        plateau[clik[0]-2][clik[1]] = 0;
    if(posible[3]==1)
        plateau[clik[0]+2][clik[1]] = 0;

    if(eventx.type==SDL_MOUSEBUTTONDOWN){
            SDL_Point clic = {eventx.button.x, eventx.button.y};
            if(SDL_PointInRect(&clic, &rect[clik[0]][clik[1]-2])){
                plateau[clik[0]][clik[1]-2] = 1;
                plateau[clik[0]][clik[1]-1] = 0;
                plateau[clik[0]][clik[1]] = 0;
            }
            if(SDL_PointInRect(&clic, &rect[clik[0]][clik[1]+2])){
                plateau[clik[0]][clik[1]+2] = 1;
                plateau[clik[0]][clik[1]+1] = 0;
                plateau[clik[0]][clik[1]] = 0;
            }
            if(SDL_PointInRect(&clic, &rect[clik[0]-2][clik[1]])){
                plateau[clik[0]-2][clik[1]] = 1;
                plateau[clik[0]-1][clik[1]] = 0;
                plateau[clik[0]][clik[1]] = 0;
            }
            if(SDL_PointInRect(&clic, &rect[clik[0]+2][clik[1]])){
                plateau[clik[0]+2][clik[1]] = 1;
                plateau[clik[0]+1][clik[1]] = 0;
                plateau[clik[0]][clik[1]] = 0;
            }
        }
    refresh();

}

int loserorwinner(){
    int i, j;
    int n=0;
    for(i=0; i<dim; i++){
        for(j=0; j<dim; j++){
             if(plateau[i][j]==1){
                    //test a gauche
                    if(plateau[i][j-1]==1 && plateau[i][j-2]==0)
                      return 0;
                    //test a droite
                    if(plateau[i][j+1]==1 && plateau[i][j+2]==0)
                        return 0;
                    //test en haut
                    if(plateau[i-1][j]==1 && plateau[i-2][j]==0)
                        return 0;
                    //test en bas
                    if(plateau[i+1][j]==1 && plateau[i+2][j]==0)
                        return 0;
                    n++;
        }
    }
}
    if(n==1)
        return 1;
    if(n!=1)
        return -1;
}

int main(int argc, char *argv[]){
    SDL_Surface *surface = NULL;
    SDL_bool quit=SDL_FALSE;
    SDL_Event event;
    int nbr_posible;
    int etat;
    if(0!=SDL_Init(SDL_INIT_VIDEO)){
        printf("error1...");
        return EXIT_FAILURE;
    }
    window = SDL_CreateWindow("solitaire", 500, 200, 800, 800, SDL_WINDOW_SHOWN);
    renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);
    surface = SDL_LoadBMP("pion.bmp");
    pion = SDL_CreateTextureFromSurface(renderer, surface);
    surface = SDL_LoadBMP("possible.bmp");
    pion_pos = SDL_CreateTextureFromSurface(renderer, surface);
    surface = SDL_LoadBMP("select.bmp");
    pion_select = SDL_CreateTextureFromSurface(renderer, surface);
    texture = SDL_CreateTexture(renderer, SDL_PIXELFORMAT_ABGR8888, SDL_TEXTUREACCESS_TARGET, 800, 800);
    SDL_SetRenderTarget(renderer, &texture);
    initialise();
    affiche_dispo();
    refresh();
    while(!quit){
        SDL_WaitEvent(&event);
        if(event.type==SDL_QUIT)
            quit = SDL_TRUE;
        if(event.type==SDL_MOUSEBUTTONUP){
            nbr_posible = verif_event(event);
            if(nbr_posible!=0){
                bouf();
                affiche_dispo();
                etat = loserorwinner();
                if(etat==-1)
                    quit = SDL_TRUE;
           }
        }
        SDL_Delay(50);
    }
    SDL_DestroyWindow(window);
    SDL_DestroyTexture(texture);
    return 0;
}
